<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>河 的 第 三 条 岸</title>
  <subtitle>A Blog About Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arondight.github.io/"/>
  <updated>2016-03-22T15:21:02.207Z</updated>
  <id>https://arondight.github.io/</id>
  
  <author>
    <name>Arondight</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算IP、ICMP、TCP和UDP包的校验和</title>
    <link href="https://arondight.github.io/2016/03/22/%E8%AE%A1%E7%AE%97IP%E3%80%81ICMP%E3%80%81TCP%E5%92%8CUDP%E5%8C%85%E7%9A%84%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
    <id>https://arondight.github.io/2016/03/22/计算IP、ICMP、TCP和UDP包的校验和/</id>
    <published>2016-03-22T12:06:40.000Z</published>
    <updated>2016-03-22T15:21:02.207Z</updated>
    
    <content type="html">&lt;h1 id=&quot;校验和算法&quot;&gt;&lt;a href=&quot;#校验和算法&quot; class=&quot;headerlink&quot; title=&quot;校验和算法&quot;&gt;&lt;/a&gt;校验和算法&lt;/h1&gt;&lt;p&gt;校验和的计算方法在文档&lt;a href=&quot;https://tools.ietf.org/html/rfc1071&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 1071&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1)  Adjacent octets to be checksummed are paired to form 16-bit&lt;br&gt;     integers, and the 1’s complement sum of these 16-bit integers is&lt;br&gt;     formed.&lt;/p&gt;
&lt;p&gt;(2)  To generate a checksum, the checksum field itself is cleared,&lt;br&gt;     the 16-bit 1’s complement sum is computed over the octets&lt;br&gt;     concerned, and the 1’s complement of this sum is placed in the&lt;br&gt;     checksum field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;即首先将校验和字段清零，将待求和数据调整为偶数字节（如为奇数字节则最后一个字节扩展为字）。然后用反码相加法（进位加到低位上）、以字为单位累加待求和数据。最后将累加结果取反并截低16 位作为校验和。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之所以使用反码相加法，是为了让计算结果和网络序或主机序无关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据这个规则，计算校验和的的C 语言函数可以做如下实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetChecksum (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; addr, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; checksum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; nleft;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert (addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert (bytes &amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  word = (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *)addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nleft = bytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 使用32 位累加器，顺序累加16 位数据，进位保存在高16 位 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; nleft &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; nleft -=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sum += *word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ++word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 如果总字节为奇数则处理最后一个字节 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum += nleft ? *(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)word : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 将进位加到低16 位，并将本次计算产生的进位再次加到低16 位 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum = (sum &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) + (sum &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum += (sum &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 结果取反并截低16 位为校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; checksum = ~sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面会使用这个校验和计算函数分别计算IP、ICMP、TCP和UDP 包的校验和。&lt;/p&gt;
&lt;h1 id=&quot;IP-包校验和的计算&quot;&gt;&lt;a href=&quot;#IP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;IP 包校验和的计算&quot;&gt;&lt;/a&gt;IP 包校验和的计算&lt;/h1&gt;&lt;p&gt;IP 包校验和的计算范围在&lt;a href=&quot;https://tools.ietf.org/html/rfc792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 791&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   The checksum field is the 16 bit one’s complement of the one’s&lt;br&gt;   complement sum of all 16 bit words in the header.  For purposes of&lt;br&gt;   computing the checksum, the value of the checksum field is zero.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即IP 包的校验和只计算包头。&lt;/p&gt;
&lt;p&gt;根据描述，IP 包的校验和可用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ipheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充ipheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算该IP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader-&amp;gt;check = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader-&amp;gt;check = GetChecksum (ipheader, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;ICMP-包校验和的计算&quot;&gt;&lt;a href=&quot;#ICMP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;ICMP 包校验和的计算&quot;&gt;&lt;/a&gt;ICMP 包校验和的计算&lt;/h1&gt;&lt;p&gt;ICMP 包校验和的计算范围在[RFC 792][ID_RFC_792] 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   The checksum is the 16-bit ones’s complement of the one’s&lt;br&gt;   complement sum of the ICMP message starting with the ICMP Type.&lt;br&gt;   For computing the checksum , the checksum field should be zero.&lt;br&gt;   This checksum may be replaced in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即ICMP 包的计算范围包括包头和数据。&lt;/p&gt;
&lt;p&gt;根据描述，假设IP 包校验和已经计算完毕，那么其中的ICMP 包校验和可以用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmphdr *icmpheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; ipheaderSize = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmphdr *)(packet + ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充icmpheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算该ICMP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader-&amp;gt;checksum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader-&amp;gt;checksum = GetChecksum (icmpheader, packetSize - ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h1 id=&quot;TCP-和UDP-包校验和的计算&quot;&gt;&lt;a href=&quot;#TCP-和UDP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;TCP 和UDP 包校验和的计算&quot;&gt;&lt;/a&gt;TCP 和UDP 包校验和的计算&lt;/h1&gt;&lt;h2 id=&quot;伪首部&quot;&gt;&lt;a href=&quot;#伪首部&quot; class=&quot;headerlink&quot; title=&quot;伪首部&quot;&gt;&lt;/a&gt;伪首部&lt;/h2&gt;&lt;p&gt;TCP 和UDP 校验和的计算要稍微麻烦一些，因为需要引入一个伪首部（pseudo header），伪首部的结构在&lt;a href=&quot;https://tools.ietf.org/html/rfc768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 768&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; The pseudo  header  conceptually prefixed to the UDP header contains the&lt;br&gt; source  address,  the destination  address,  the protocol,  and the  UDP&lt;br&gt; length.   This information gives protection against misrouted datagrams.&lt;br&gt; This checksum procedure is the same as is used in TCP.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0      7 8     15 16    23 24    31
+--------+--------+--------+--------+
|          source address           |
+--------+--------+--------+--------+
|        destination address        |
+--------+--------+--------+--------+
|  zero  |protocol|   UDP length    |
+--------+--------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;可见TCP 和UDP 的伪首部结构完全一致。&lt;/p&gt;
&lt;p&gt;根据描述，伪首部的结构可以用C 语言结构体做如下实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pseudohdr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; zero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;TCP-包校验和的计算&quot;&gt;&lt;a href=&quot;#TCP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;TCP 包校验和的计算&quot;&gt;&lt;/a&gt;TCP 包校验和的计算&lt;/h2&gt;&lt;p&gt;TCP 包校验和的计算方法在&lt;a href=&quot;https://tools.ietf.org/html/rfc793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 793&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; The checksum field is the 16 bit one’s complement of the one’s&lt;br&gt; complement sum of all 16 bit words in the header and text.  If a&lt;br&gt; segment contains an odd number of header and text octets to be&lt;br&gt; checksummed, the last octet is padded on the right with zeros to&lt;br&gt; form a 16 bit word for checksum purposes.  The pad is not&lt;br&gt; transmitted as part of the segment.  While computing the checksum,&lt;br&gt; the checksum field itself is replaced with zeros.&lt;/p&gt;
&lt;p&gt;   The checksum also covers a 96 bit pseudo header conceptually&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可见，算法和之前提到的校验和算法完全一致，根据描述校验和的计算需要包含伪首部和整个TCP 包。&lt;/p&gt;
&lt;p&gt;根据描述，假设IP 包校验和已经计算完毕，那么其中的TCP 包校验和可以用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *tcpsumblock;          &lt;span class=&quot;comment&quot;&gt;/* 伪首部 + TCP 头 + 数据 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ipheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr *tcpheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt; pseudoheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; ipheaderSize = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr *)(packet + ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充tcpheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充pseudoheader */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.src = ipheader-&amp;gt;saddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.dst = ipheader-&amp;gt;daddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.zero = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.protocol = ipheader-&amp;gt;protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.len = htons (&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充tcpsumblock */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader-&amp;gt;check = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpsumblock = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt; (packetSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt; (tcpsumblock, &amp;amp;pseudoheader, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt; (tcpsumblock + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;), packet, packetSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算TCP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader-&amp;gt;check =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  GetChecksum (tcpsumblock, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;) + packetSize - ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; (tcpsumblock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpsumblock = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;UDP-包校验和的计算&quot;&gt;&lt;a href=&quot;#UDP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;UDP 包校验和的计算&quot;&gt;&lt;/a&gt;UDP 包校验和的计算&lt;/h2&gt;&lt;p&gt;UDP 包校验和的计算方法在&lt;a href=&quot;https://tools.ietf.org/html/rfc768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 793&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Checksum is the 16-bit one’s complement of the one’s complement sum of a&lt;br&gt; pseudo header of information from the IP header, the UDP header, and the&lt;br&gt; data,  padded  with zero octets  at the end (if  necessary)  to  make  a&lt;br&gt; multiple of two octets.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以UDP 包校验和的计算方法和TCP 包如出一辙，同样包含了一个伪首部。&lt;/p&gt;
&lt;p&gt;具体的实现可以参考之前计算TCP 包校验的C 语言实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;校验和算法&quot;&gt;&lt;a href=&quot;#校验和算法&quot; class=&quot;headerlink&quot; title=&quot;校验和算法&quot;&gt;&lt;/a&gt;校验和算法&lt;/h1&gt;&lt;p&gt;校验和的计算方法在文档&lt;a href=&quot;https://tools.ietf.org/html/rfc1071&quot;&gt;RFC 1071&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1)  Adjacent octets to be checksummed are paired to form 16-bit&lt;br&gt;     integers, and the 1’s complement sum of these 16-bit integers is&lt;br&gt;     formed.&lt;/p&gt;
&lt;p&gt;(2)  To generate a checksum, the checksum field itself is cleared,&lt;br&gt;     the 16-bit 1’s complement sum is computed over the octets&lt;br&gt;     concerned, and the 1’s complement of this sum is placed in the&lt;br&gt;     checksum field.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://arondight.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网络协议" scheme="https://arondight.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="IP" scheme="https://arondight.github.io/tags/IP/"/>
    
      <category term="TCP" scheme="https://arondight.github.io/tags/TCP/"/>
    
      <category term="ICMP" scheme="https://arondight.github.io/tags/ICMP/"/>
    
      <category term="UDP" scheme="https://arondight.github.io/tags/UDP/"/>
    
      <category term="校验和" scheme="https://arondight.github.io/tags/%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>历风</title>
    <link href="https://arondight.github.io/2016/03/13/%E5%8E%86%E9%A3%8E/"/>
    <id>https://arondight.github.io/2016/03/13/历风/</id>
    <published>2016-03-13T07:11:18.000Z</published>
    <updated>2016-03-13T07:38:23.669Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;八月十四日。&lt;/p&gt;
&lt;p&gt;要问究竟发生了什么的话，那就是我跟欺诈师本人见面了——也不知道该说是见面，还是应该说撞面。&lt;/p&gt;
&lt;p&gt;曾经说过不会再来访这个小镇的他，却说什么因为说过“再”这个字，所以就再回来了一次。开什么玩笑，快去死。&lt;/p&gt;
&lt;p&gt;当时我跟他谈论的主要话题本来是跟另外的专家有关的事情，不过后来还是顺便问了一下。&lt;/p&gt;
&lt;p&gt;“哼。”&lt;/p&gt;
&lt;p&gt;他说道：&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;“解读风向的力量，刮起风的力量——我根本就不具备那样的本事。不，这句发言说不定也是骗人的。”&lt;/p&gt;
&lt;p&gt;“……”&lt;/p&gt;
&lt;p&gt;真的是说什么也不能信的家伙。&lt;/p&gt;
&lt;p&gt;大概再怎么问他也是白费力气的吧——正当我这么想的时候。&lt;/p&gt;
&lt;p&gt;“但是就我来说，解读风向的力量根本就不重要。”&lt;/p&gt;
&lt;p&gt;他却接着这么说道。&lt;/p&gt;
&lt;p&gt;“因为在瘟疫之中，最重要的是无风的状态。”&lt;/p&gt;
&lt;p&gt;“无——无风？”&lt;/p&gt;
&lt;p&gt;“在引发瘟疫的时候，我认为最重要的就是这一点了啊，阿良良木。”&lt;/p&gt;
&lt;p&gt;“没有风——吗？”&lt;/p&gt;
&lt;p&gt;“就是说当某种东西正在流行的时候，其他的东西就不会流行起来——严格来说，应该是就算其他东西流行起来，也不会怎么引人注目吧……所以如果想让自己意图中的东西流行起来，就算不选择目标，也必须选择舞台。”&lt;/p&gt;
&lt;p&gt;“……”&lt;/p&gt;
&lt;p&gt;“谣言不过七十五天——那么在那七十五天里就只能放弃创造潮流的想法。具体来说，以这个小镇为例，在春假期间我没有下手。因为当时‘吸血鬼’这个传闻正席卷着整个小镇，完全没有办法对抗那压倒性的NO.1的存在——要问这种压倒性压倒了什么，那就是这种病毒压倒了其他的所有病毒。然后等到那个传闻销声匿迹之后——我的流言就钻进了这个空荡荡的、处于饥饿状态的地方。”&lt;/p&gt;
&lt;p&gt;听他这么说我才醒悟过来。&lt;/p&gt;
&lt;p&gt;也就是说正是空白的产生引发了瘟疫——即使不是这样，至少那不也是一个容易发生的条件吗？&lt;/p&gt;
&lt;p&gt;“怪谈、街谈巷说和都市传说——所谓的流言蜚语，总是会在人心动荡的时候发挥效力。所谓人心动荡，说白了就是丧失了可依靠的存在，也就是缺乏潮流的时代了——阿良良木，被欺诈师锁定为目标的都是一些什么样的人，你就试着思考一下吧。”&lt;/p&gt;
&lt;p&gt;“试着思考一下什么的……那种事我才不想思考。”&lt;/p&gt;
&lt;p&gt;“想一想吧。”&lt;/p&gt;
&lt;p&gt;“别向我提出奇怪的要求啊。唔，这个……当然是有钱人吧？难道不是以富裕人群为目标的吗？”&lt;/p&gt;
&lt;p&gt;“那只是善人的想法。但是出于满足状态的人是很难上当的——因为在生活上有余力的人，在精神上也保持着余力。所以欺诈师最看中的，就是那些对现状抱有不满、在生活上没有余力的人。”&lt;/p&gt;
&lt;p&gt;“……所以在这个小镇上，你就把目标锁定为初中女生了吗？”&lt;/p&gt;
&lt;p&gt;或者——&lt;/p&gt;
&lt;p&gt;正如过去——他把目标锁定为由于女儿的病而陷入困境的战场原家那样。&lt;/p&gt;
&lt;p&gt;“说的没错，充满不安的内心是最容易受骗的。因为就算说谎对方也没有仔细分析的余力。”&lt;/p&gt;
&lt;p&gt;欺诈师毫不愧疚地说道。&lt;/p&gt;
&lt;p&gt;“你刚才说我通过散播让人际关系恶化的‘符咒’来打下欺诈活动的基础——但是在这一点上，事实却正好相反。正因为人际关系发生了恶化，她们才会对我的‘符咒’趋之若鹜。”&lt;/p&gt;
&lt;p&gt;无风状态并不等同于无菌状态。&lt;/p&gt;
&lt;p&gt;反而是潜藏着能引起爆发性瘟疫的病毒——欺诈师说道。&lt;/p&gt;
&lt;p&gt;“……错的都是受骗的一方——你是这个意思吗？”&lt;/p&gt;
&lt;p&gt;“被你这样说，我就变得不想说这个了。就姑且说是时代的错吧。如果要讨论‘为什么这样的东西会流行起来？’‘有流行过吗？’这样的混乱状态，就必须先讨论混乱状态之前的空白。”&lt;/p&gt;
&lt;p&gt;“空白——”&lt;/p&gt;
&lt;p&gt;“或者也可以说是黑暗。所以我就给你一个忠告，如果有‘莫名其妙的东西’流行起来——记得怀疑时代，怀疑自己的立足点。你必须意识到有危险——意识到这是危险性的状况。因为不管是人为的操纵，还是自然形成的现象——那都是时代被黑暗所笼罩的证明。”&lt;/p&gt;
&lt;p&gt;“被黑暗——所笼罩。”&lt;/p&gt;
&lt;p&gt;“掀起潮流的容易程度，就跟掀起暴动的容易程度差不多——因为没有稳固的立足点，所以人就会随波逐流。当然，那样的时代，对我这样的欺诈师来说反而更容易谋生。”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;——《历物语》，第五话 历风&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;八月十四日。&lt;/p&gt;
&lt;p&gt;要问究竟发生了什么的话，那就是我跟欺诈师本人见面了——也不知道该说是见面，还是应该说撞面。&lt;/p&gt;
&lt;p&gt;曾经说过不会再来访这个小镇的他，却说什么因为说过“再”这个字，所以就再回来了一次。开什么玩笑，快去死。&lt;/p&gt;
&lt;p&gt;当时我跟他谈论的主要话题本来是跟另外的专家有关的事情，不过后来还是顺便问了一下。&lt;/p&gt;
&lt;p&gt;“哼。”&lt;/p&gt;
&lt;p&gt;他说道：&lt;/p&gt;
    
    </summary>
    
      <category term="节" scheme="https://arondight.github.io/categories/%E8%8A%82/"/>
    
    
      <category term="日常" scheme="https://arondight.github.io/tags/%E6%97%A5%E5%B8%B8/"/>
    
      <category term="轻小说" scheme="https://arondight.github.io/tags/%E8%BD%BB%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="物语系列" scheme="https://arondight.github.io/tags/%E7%89%A9%E8%AF%AD%E7%B3%BB%E5%88%97/"/>
    
      <category term="历物语" scheme="https://arondight.github.io/tags/%E5%8E%86%E7%89%A9%E8%AF%AD/"/>
    
      <category term="西尾维新" scheme="https://arondight.github.io/tags/%E8%A5%BF%E5%B0%BE%E7%BB%B4%E6%96%B0/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH反向隧道进行内网穿透</title>
    <link href="https://arondight.github.io/2016/02/17/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://arondight.github.io/2016/02/17/使用SSH反向隧道进行内网穿透/</id>
    <published>2016-02-17T10:09:57.000Z</published>
    <updated>2016-03-04T15:25:52.168Z</updated>
    
    <content type="html">&lt;h1 id=&quot;对应的情况&quot;&gt;&lt;a href=&quot;#对应的情况&quot; class=&quot;headerlink&quot; title=&quot;对应的情况&quot;&gt;&lt;/a&gt;对应的情况&lt;/h1&gt;&lt;p&gt;这篇文章主要介绍了如何利用SSH 反向隧道穿透NAT，并演示了如何维持一条稳定的SSH 隧道。&lt;/p&gt;
&lt;p&gt;假设有机器A 和B，A 有公网IP，B 位于NAT 之后并无可用的端口转发，现在想由A 主动向B 发起SSH 连接。由于B 在NAT 后端，无可用&lt;strong&gt;公网IP + 端口&lt;/strong&gt; 这样一个组合，所以A 无法穿透NAT，这篇文章应对的就是这种情况。&lt;/p&gt;
&lt;p&gt;首先有如下约定，因为很重要所以放在前面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器代号&lt;/th&gt;
&lt;th&gt;机器位置&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;账户&lt;/th&gt;
&lt;th&gt;ssh/sshd 端口&lt;/th&gt;
&lt;th&gt;是否需要运行sshd&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;位于公网&lt;/td&gt;
&lt;td&gt;a.site&lt;/td&gt;
&lt;td&gt;usera&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;b.localhost&lt;/td&gt;
&lt;td&gt;userb&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;c.localhost&lt;/td&gt;
&lt;td&gt;userc&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;这里默认你的系统init 程序为&lt;code&gt;systemd&lt;/code&gt;，如果你使用其他的init 程序，如果没有特殊理由还是换到一个现代化的GNU/Linux 系统吧……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;SSH-反向隧道&quot;&gt;&lt;a href=&quot;#SSH-反向隧道&quot; class=&quot;headerlink&quot; title=&quot;SSH 反向隧道&quot;&gt;&lt;/a&gt;SSH 反向隧道&lt;/h1&gt;&lt;p&gt;这种手段实质上是由B 向A 主动地建立一个SSH 隧道，将A 的6766 端口转发到B 的22 端口上，只要这条隧道不关闭，这个转发就是有效的。有了这个端口转发，只需要访问A 的6766 端口反向连接B 即可。&lt;/p&gt;
&lt;p&gt;首先在&lt;strong&gt;B&lt;/strong&gt; 上建立一个SSH 隧道，将A 的6766 端口转发到B 的22 端口上：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh -p 22 -qngfNTR 6766:b.localhost:22 usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;strong&gt;A&lt;/strong&gt; 上利用6766 端口反向SSH 到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要做的事情其实就是这么简单。&lt;/p&gt;
&lt;h1 id=&quot;隧道的维持&quot;&gt;&lt;a href=&quot;#隧道的维持&quot; class=&quot;headerlink&quot; title=&quot;隧道的维持&quot;&gt;&lt;/a&gt;隧道的维持&lt;/h1&gt;&lt;h2 id=&quot;稳定性维持&quot;&gt;&lt;a href=&quot;#稳定性维持&quot; class=&quot;headerlink&quot; title=&quot;稳定性维持&quot;&gt;&lt;/a&gt;稳定性维持&lt;/h2&gt;&lt;p&gt;然而不幸的是SSH 连接是会超时关闭的，如果连接关闭，隧道无法维持，那么A 就无法利用反向隧道穿透B 所在的NAT 了，为此我们需要一种方案来提供一条稳定的SSH 反向隧道。&lt;/p&gt;
&lt;p&gt;一个最简单的方法就是&lt;code&gt;autossh&lt;/code&gt;，这个软件会在超时之后自动重新建立SSH 隧道，这样就解决了隧道的稳定性问题，如果你使用&lt;a href=&quot;https://www.archlinux.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arch Linux&lt;/a&gt;，你可以这样获得它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo pacman -S autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面在&lt;strong&gt;B&lt;/strong&gt; 上做之前类似的事情，不同的是该隧道会由&lt;code&gt;autossh&lt;/code&gt; 来维持：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ autossh -p 22 -M 6777 -NR 6766:b.localhost:22 usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-M&lt;/code&gt; 参数指定的端口用来监听隧道的状态，与端口转发无关。&lt;/p&gt;
&lt;p&gt;之后你可以在A 上通过6766 端口访问B 了：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;隧道的自动建立&quot;&gt;&lt;a href=&quot;#隧道的自动建立&quot; class=&quot;headerlink&quot; title=&quot;隧道的自动建立&quot;&gt;&lt;/a&gt;隧道的自动建立&lt;/h2&gt;&lt;p&gt;然而这又有了另外一个问题，如果B 重启隧道就会消失。那么需要有一种手段在B 每次启动时使用&lt;code&gt;autossh&lt;/code&gt; 来建立SSH 隧道。很自然的一个想法就是做成服务，之后会给出在&lt;code&gt;systemd&lt;/code&gt; 下的一种解决方案。&lt;/p&gt;
&lt;h1 id=&quot;“打洞”&quot;&gt;&lt;a href=&quot;#“打洞”&quot; class=&quot;headerlink&quot; title=&quot;“打洞”&quot;&gt;&lt;/a&gt;“打洞”&lt;/h1&gt;&lt;p&gt;之所以标题这么起，是因为自己觉得这件事情有点类似于UDP 打洞，即通过一台在公网的机器，让两台分别位于各自NAT 之后的机器可以建立SSH 连接。&lt;/p&gt;
&lt;p&gt;下面演示如何使用SSH 反向隧道，让C 连接到B。&lt;/p&gt;
&lt;p&gt;首先在&lt;strong&gt;A&lt;/strong&gt; 上编辑&lt;code&gt;sshd&lt;/code&gt; 的配置文件&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，将&lt;code&gt;GatewayPorts&lt;/code&gt; 开关打开：&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;GatewayPorts&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后重启&lt;code&gt;sshd&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ sudo systemctl restart sshd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上对之前用到的&lt;code&gt;autossh&lt;/code&gt; 指令略加修改：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ autossh -p 22 -M 6777 -NR &lt;span class=&quot;string&quot;&gt;&#39;*:6766:b.localhost:22&#39;&lt;/span&gt; usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后在&lt;strong&gt;C&lt;/strong&gt; 上利用&lt;strong&gt;A&lt;/strong&gt; 的6766 端口SSH 连接到&lt;strong&gt;B&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C $ ssh -p 6766 userb@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此你已经轻而易举的穿透了两层NAT。&lt;/p&gt;
&lt;h1 id=&quot;最终的解决方案&quot;&gt;&lt;a href=&quot;#最终的解决方案&quot; class=&quot;headerlink&quot; title=&quot;最终的解决方案&quot;&gt;&lt;/a&gt;最终的解决方案&lt;/h1&gt;&lt;p&gt;整合一下前面提到的，最终的解决方案如下：&lt;/p&gt;
&lt;p&gt;首先打开&lt;strong&gt;A&lt;/strong&gt; 上&lt;code&gt;sshd&lt;/code&gt; 的&lt;code&gt;GatewayPorts&lt;/code&gt; 开关，并重启&lt;code&gt;sshd&lt;/code&gt;（如有需要）。&lt;/p&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上新建一个用户&lt;em&gt;autossh&lt;/em&gt;，根据权限最小化思想，B 上的&lt;code&gt;autossh&lt;/code&gt; 服务将以&lt;em&gt;autossh&lt;/em&gt; 用户的身份运行，以尽大可能避免出现安全问题：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo useradd -m autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo passwd autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着在&lt;strong&gt;B&lt;/strong&gt; 上为&lt;em&gt;autossh&lt;/em&gt; 用户创建SSH 密钥，并上传到A：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ su - autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh-keygen -t &lt;span class=&quot;string&quot;&gt;&#39;rsa&#39;&lt;/span&gt; -C &lt;span class=&quot;string&quot;&gt;&#39;autossh@b.localhost&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh-copy-id usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意该&lt;strong&gt;密钥不要设置密码&lt;/strong&gt;，也就是运行&lt;code&gt;ssh-keygen&lt;/code&gt; 指令时尽管一路回车，不要输入额外的字符。&lt;/p&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上创建以&lt;em&gt;autossh&lt;/em&gt; 用户权限调用&lt;code&gt;autossh&lt;/code&gt; 的service 文件。将下面文本写入到文件&lt;code&gt;/lib/systemd/system/autossh.service&lt;/code&gt;，并设置权限为644：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Description&lt;/span&gt;=Auto SSH Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;After&lt;/span&gt;=network.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;User&lt;/span&gt;=autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Type&lt;/span&gt;=simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecStart&lt;/span&gt;=/bin/autossh -p &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; -M &lt;span class=&quot;number&quot;&gt;6777&lt;/span&gt; -NR &lt;span class=&quot;string&quot;&gt;&#39;*:6766:b.localhost:22&#39;&lt;/span&gt; usera@a.site -i /home/autossh/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecReload&lt;/span&gt;=/bin/kill -HUP &lt;span class=&quot;variable&quot;&gt;$MAINPID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;KillMode&lt;/span&gt;=process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Restart&lt;/span&gt;=always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;strong&gt;B&lt;/strong&gt; 上设置该服务自动启动：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你愿意，在这之后可以立刻启动它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo systemctl start autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你可以在&lt;strong&gt;A&lt;/strong&gt; 上使用这条反向隧道穿透B 所在的NAT SSH 连接到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者是在&lt;strong&gt;C&lt;/strong&gt; 上直接穿透两层NAT SSH 连接到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C $ ssh -p 6766 userb@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;对应的情况&quot;&gt;&lt;a href=&quot;#对应的情况&quot; class=&quot;headerlink&quot; title=&quot;对应的情况&quot;&gt;&lt;/a&gt;对应的情况&lt;/h1&gt;&lt;p&gt;这篇文章主要介绍了如何利用SSH 反向隧道穿透NAT，并演示了如何维持一条稳定的SSH 隧道。&lt;/p&gt;
&lt;p&gt;假设有机器A 和B，A 有公网IP，B 位于NAT 之后并无可用的端口转发，现在想由A 主动向B 发起SSH 连接。由于B 在NAT 后端，无可用&lt;strong&gt;公网IP + 端口&lt;/strong&gt; 这样一个组合，所以A 无法穿透NAT，这篇文章应对的就是这种情况。&lt;/p&gt;
&lt;p&gt;首先有如下约定，因为很重要所以放在前面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器代号&lt;/th&gt;
&lt;th&gt;机器位置&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;账户&lt;/th&gt;
&lt;th&gt;ssh/sshd 端口&lt;/th&gt;
&lt;th&gt;是否需要运行sshd&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;位于公网&lt;/td&gt;
&lt;td&gt;a.site&lt;/td&gt;
&lt;td&gt;usera&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;b.localhost&lt;/td&gt;
&lt;td&gt;userb&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;c.localhost&lt;/td&gt;
&lt;td&gt;userc&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="技术" scheme="https://arondight.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="https://arondight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="内网穿透" scheme="https://arondight.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="SSH" scheme="https://arondight.github.io/tags/SSH/"/>
    
      <category term="隧道" scheme="https://arondight.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="https://arondight.github.io/2016/02/08/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>https://arondight.github.io/2016/02/08/新年快乐/</id>
    <published>2016-02-07T16:00:00.000Z</published>
    <updated>2016-03-04T16:26:34.312Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# For Linux 4.0+ x86_64&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;By_Arondight&#39;&lt;/span&gt; | env gcc -xc -o .\ - - \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; ./.\ - &amp;amp;&amp;amp; env rm .\ -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char _[]=&lt;span class=&quot;string&quot;&gt;&quot;\xe6\x96\xb0\xe5\xb9\xb4\xe5\xbf\xab\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\xe4\xb9\x90\xef\xbc\x81\x0a&quot;&lt;/span&gt;;____(___)&amp;lt;%putchar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((___++)[_])&amp;amp;&amp;amp;____(___);_&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(0);%&amp;gt;main()&amp;lt;%long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__=____;*(&amp;amp;__+2)=__;__asm__(&lt;span class=&quot;string&quot;&gt;&quot;\x78\x6f\x72\x71\x20\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\x25\x72\x64\x69\x2c\x20\x25\x72\x64\x69\xa\x0&quot;&lt;/span&gt;);%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;By_Arondight&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;惟愿可以遇到美好的人和事。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
    
    </summary>
    
      <category term="节" scheme="https://arondight.github.io/categories/%E8%8A%82/"/>
    
    
      <category term="新年" scheme="https://arondight.github.io/tags/%E6%96%B0%E5%B9%B4/"/>
    
      <category term="C" scheme="https://arondight.github.io/tags/C/"/>
    
      <category term="Shell" scheme="https://arondight.github.io/tags/Shell/"/>
    
      <category term="汇编" scheme="https://arondight.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="溢出" scheme="https://arondight.github.io/tags/%E6%BA%A2%E5%87%BA/"/>
    
      <category term="栈帧" scheme="https://arondight.github.io/tags/%E6%A0%88%E5%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>软件和世界，愚者的中二之语</title>
    <link href="https://arondight.github.io/2016/01/10/%E8%BD%AF%E4%BB%B6%E5%92%8C%E4%B8%96%E7%95%8C%EF%BC%8C%E6%84%9A%E8%80%85%E7%9A%84%E4%B8%AD%E4%BA%8C%E4%B9%8B%E8%AF%AD/"/>
    <id>https://arondight.github.io/2016/01/10/软件和世界，愚者的中二之语/</id>
    <published>2016-01-10T11:24:11.000Z</published>
    <updated>2016-03-13T07:51:30.499Z</updated>
    
    <content type="html">&lt;p&gt;写这篇文章的现在心情有点糟，突然地被要求周末要去公司排练舞蹈，以后半个月也被不讲理地安排下班后加班排练，感觉自己完全把握不住自己的生活——作为一个程序员来说。&lt;/p&gt;
&lt;p&gt;从毕业到现在大约已经工作5 个月了，老实说，并没有什么令人激动的事情发生。虽然写的一部分代码也可以说正在被很多很多人使用着，然而我觉得这并没有让他们的生活发生什么变化。周遭的生活被工作夺走了，但是心中的期待并没有得到回应，虽然这么说有一点点不讲理，但是内心还是有一点失落的。&lt;/p&gt;
&lt;p&gt;以前我一直想写一个好的软件，当然现在也是，算起来的话从自己造一些小轮子开始就很向往这样的事情吧。“能遇到这个软件真的是太好了”，很想未来某天有人在用到我写的东西的时候也能诞生出这样的想法。说回来读过不少的书似乎都鼓励读者以写出“伟大的软件”为目标呢，但是这个概念一直在心中没有什么实感。而且“为什么我非要写一个伟大的软件呢”，没有什么特别的理由被想出。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;总觉得“好”和“伟大”之间有着不小的区别，但是我没办法很好地表达出这种区别，要说重要性的话当然是后者重要很多。但要问为什么自己会执着于一个不是很重要的目标，我能摊手么 X_X&lt;/p&gt;
&lt;p&gt;提两款这些年里遇到的“好的软件”吧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Zygo/xscreensaver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;XScreenSaver&lt;/a&gt;，一系列免费屏幕保护程序的集合，其中有一款名字叫&lt;a href=&quot;https://github.com/Zygo/xscreensaver/blob/master2/hacks/celtic.c&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Celtic&lt;/a&gt;，这是一个非常非常漂亮的屏幕保护程序，时常会盯着发呆很久的那种，有一种奇妙的美感。&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/jonls/redshift&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Redshift&lt;/a&gt;，一款能够根据经纬度计算昼夜时间，并根据这个时间平滑调整屏幕色温的软件，也是带有感激之情的一款软件。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;伟大的软件也有很多，例如Linux，例如GCC，例如Xorg，例如nginx……然而只是觉得它们是很伟大的软件而已，并没有让内心感觉到特殊的感情。大约这就是“好”和“伟大”的区别，前者会让人觉得生活发生了一些好的改变，后者似乎因为伟大而成了一种必然的事物。&lt;/p&gt;
&lt;p&gt;这几年造了各种轮子，不少随着时间太久慢慢丢失了的，也有几个后来申请了个Github 挂在上面的，不过自己写的好的软件应该只有两个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/Arondight/profile/tree/master/zsh/.zsh/ssh_env&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh-env&lt;/a&gt;，用来管理多套ssh 密钥的小脚本，这半年里带给自己日常生活很多方便。&lt;/li&gt;
&lt;li&gt;“电源盒子”，大约6 年前用GTK+ 写的一个小程序，用来关机、重启、睡眠或者关闭显示器，然而很多年前就已经遗失了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;也造过很多其他的轮子，包括编码风格能让自己感到自豪的轮子，和代码量足足的轮子，但是都没有写上面提到的两个软件的那种奇妙的心情，也不会在以后用到的时候感觉“自己做了这个东西真的太好了”。&lt;/p&gt;
&lt;p&gt;这也是我一直没有实现的事情，写一个能够给很多人的生活带来好的改变的软件，或许以后可以实现，或许永远都实现不了，不过我还是有一点点期待，期待能够为肤色不同、语言相异的人们做一些有意义的事情。&lt;/p&gt;
&lt;p&gt;感觉自己可能一生都只会是一个平庸的程序员吧。伟大的程序员会去引导世界，写出伟大的软件，给其他的人们一种可能和方向。平庸的码农只能跟在其后搭积木，但如果搭出的东西能让这个世界中一些人们的日常生活发生一点好的改变的话，那样就真的太好了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;写这篇文章的现在心情有点糟，突然地被要求周末要去公司排练舞蹈，以后半个月也被不讲理地安排下班后加班排练，感觉自己完全把握不住自己的生活——作为一个程序员来说。&lt;/p&gt;
&lt;p&gt;从毕业到现在大约已经工作5 个月了，老实说，并没有什么令人激动的事情发生。虽然写的一部分代码也可以说正在被很多很多人使用着，然而我觉得这并没有让他们的生活发生什么变化。周遭的生活被工作夺走了，但是心中的期待并没有得到回应，虽然这么说有一点点不讲理，但是内心还是有一点失落的。&lt;/p&gt;
&lt;p&gt;以前我一直想写一个好的软件，当然现在也是，算起来的话从自己造一些小轮子开始就很向往这样的事情吧。“能遇到这个软件真的是太好了”，很想未来某天有人在用到我写的东西的时候也能诞生出这样的想法。说回来读过不少的书似乎都鼓励读者以写出“伟大的软件”为目标呢，但是这个概念一直在心中没有什么实感。而且“为什么我非要写一个伟大的软件呢”，没有什么特别的理由被想出。&lt;/p&gt;
    
    </summary>
    
      <category term="日常" scheme="https://arondight.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="随笔" scheme="https://arondight.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="中二" scheme="https://arondight.github.io/tags/%E4%B8%AD%E4%BA%8C/"/>
    
  </entry>
  
  <entry>
    <title>随便写一点东西</title>
    <link href="https://arondight.github.io/2016/01/03/%E9%9A%8F%E4%BE%BF%E5%86%99%E4%B8%80%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
    <id>https://arondight.github.io/2016/01/03/随便写一点东西/</id>
    <published>2016-01-03T07:34:18.000Z</published>
    <updated>2016-02-28T10:12:33.397Z</updated>
    
    <content type="html">&lt;p&gt;下午慢慢折腾了一下Hexo，然后成果就是这个博客。老实说我也不太清楚以后究竟在这上面会写点什么，多半会是所处的日常吧。&lt;/p&gt;
&lt;p&gt;折腾完大约是下午接近4 点的样子，足足搞了快5 个小时。透过窄窄的窗子所看到的已经是很惨淡的阳光了。回过神来今天已经是公历新年后的第3 天了，或许因为最近1 个半月想了很多的事情，不知不觉已经将一年最后的时间消耗殆尽，不难过也不开心。&lt;/p&gt;
&lt;p&gt;因为搞乱了生活节奏的原因，难得的假期里并没有什么新年的实感，没想过什么愿望，也没制定什么计划，不过依着心里还留存的一点点向往，希望以后能收获一些好的事物吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下午慢慢折腾了一下Hexo，然后成果就是这个博客。老实说我也不太清楚以后究竟在这上面会写点什么，多半会是所处的日常吧。&lt;/p&gt;
&lt;p&gt;折腾完大约是下午接近4 点的样子，足足搞了快5 个小时。透过窄窄的窗子所看到的已经是很惨淡的阳光了。回过神来今天已经是公历新年后的第3 天了
    
    </summary>
    
      <category term="日常" scheme="https://arondight.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="开始" scheme="https://arondight.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
</feed>
