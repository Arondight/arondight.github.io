<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>河 的 第 三 条 岸</title>
  <subtitle>A Blog About Me</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://arondight.github.io/"/>
  <updated>2016-06-25T07:50:43.456Z</updated>
  <id>https://arondight.github.io/</id>
  
  <author>
    <name>愛と奇跡の物語</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>为美好的世界献上祝福</title>
    <link href="https://arondight.github.io/2016/05/03/%E4%B8%BA%E7%BE%8E%E5%A5%BD%E7%9A%84%E4%B8%96%E7%95%8C%E7%8C%AE%E4%B8%8A%E7%A5%9D%E7%A6%8F/"/>
    <id>https://arondight.github.io/2016/05/03/为美好的世界献上祝福/</id>
    <published>2016-05-03T15:10:45.000Z</published>
    <updated>2016-06-25T07:50:43.456Z</updated>
    
    <content type="html">&lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;说一下最近发生的两件事吧。&lt;/p&gt;
&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;第一件事是在Github 上找到了自己三年前用的一些配置文件，于是晚上本地拉了一个空分支fetch 下来后push 了上去。因为整套配置文件都是用软连接分发的，而目录架构又三年多没有变过，所以当想用Vim 打开里面的配置看看当时写成什么样子的时候，却看到了一个很陌生的界面。因为仓库检出到了三年前的分支，所以我看到了三年前自己使用的Vim。&lt;/p&gt;
&lt;p&gt;三年前我用着这个配置写过什么东西，最后那些事情也构成了现在的我。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;2&quot;&gt;&lt;a href=&quot;#2&quot; class=&quot;headerlink&quot; title=&quot;2&quot;&gt;&lt;/a&gt;2&lt;/h3&gt;&lt;p&gt;第二件事是感觉越来越看不清未来的大致轮廓了，将来会做什么行业，会在哪个城市，一切都变得模糊了起来。很多周围的事物，包括以前认为理所当然的事情都变得不确定。“自己以后肯定会继续写程序吧”，“肯定会选择留在北京吧”，“肯定会在技术上有所发展吧”，然而这些“理所当然”的事情自己越发都觉得难以相信。&lt;/p&gt;
&lt;p&gt;较之于爱好和方向，最重要的问题已经变成了如何更好地生活，其余的只是生活的手段，包括曾经自己坚持的东西。&lt;/p&gt;
&lt;h2 id=&quot;二&quot;&gt;&lt;a href=&quot;#二&quot; class=&quot;headerlink&quot; title=&quot;二&quot;&gt;&lt;/a&gt;二&lt;/h2&gt;&lt;p&gt;说一下这个行业吧，不只是程序员这一行，而是IT 这个行业，例如程序员、运维、测试之类的。&lt;/p&gt;
&lt;h3 id=&quot;1-1&quot;&gt;&lt;a href=&quot;#1-1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;大学里我对IT 的印象，编程几乎占了所有的比重。虽然和有的人说大学想学医却最终学了计算机，其实一半是撒谎，能够写程序也是高中时期我的梦想之一。所以从某些意义上来说，我也算选对了一个大学。所以从这个意义上，我也理所当然的毕业后成了一个程序员。虽然毕业之前很长时间都在踹踹不安，是不是应该考研，万一毕业后生活在社会最底层怎么办，以后应该向哪个领域发展……然而毕业后就发现曾经的不安并没有什么实际的意义，只有去工作才有工资，不管方向是不是很合口，你总得找一份。&lt;/p&gt;
&lt;p&gt;第一家公司是一个做手机操作系统的公司，说实话并没写多少代码，基本都是二次开发，晚上经常八点才下班。现在的公司是做电脑操作系统的，编程的工作也不是很多，较之深度反而更加看重广度，好在一般不到六点就走人了。&lt;/p&gt;
&lt;p&gt;然而无论如何，就结果而言我并没有像学生时代设想的那样成为一个100% 的程序员。&lt;/p&gt;
&lt;h3 id=&quot;2-1&quot;&gt;&lt;a href=&quot;#2-1&quot; class=&quot;headerlink&quot; title=&quot;2&quot;&gt;&lt;/a&gt;2&lt;/h3&gt;&lt;p&gt;也是一半撒谎，有时我会和别人说，有点后悔当初没有按照父母的安排在家乡进事业单位，否则就能过上安安稳稳的生活了，然而至少就现在而言我半点不曾后悔过。毕业后跟我去了同一个大学的两个兄弟留在了家乡，那里物价不贵，房租便宜，生活节奏很慢，晚上从七点开始，冬天六点多下班公交可能就停了。而我只身来了北京，一个晚上从九点开始的城市，物价很贵，房租普遍一个月一千五，房价高的几乎没有留下的可能性。&lt;/p&gt;
&lt;p&gt;然而将安稳的生活和四倍的工资相比，我选择了后者，纵使代价是只能在一个远离家乡的地方漂着。&lt;/p&gt;
&lt;h3 id=&quot;3&quot;&gt;&lt;a href=&quot;#3&quot; class=&quot;headerlink&quot; title=&quot;3&quot;&gt;&lt;/a&gt;3&lt;/h3&gt;&lt;p&gt;好几次我妈给我打电话，说北京干够了就回家吧。挂上电话想想自己是不是真的能回去呢。IT 是一个很矛盾的行业，相对于传统行业好混一点，但是只有一线城市才有更多的机会。相较于在一个金钱贬值的地方多赚一点，似乎在三线城市有一份收入不高但安稳的工作也挺不错吧。然而无论混的好坏，很少见到一个做IT 的出来几年就回去的。如果真的回了家乡，那么敲键盘就很难赚到钱了，除了敲键盘，你还有什么吃饭的技能呢。&lt;/p&gt;
&lt;p&gt;你只能在一个自我价值贬值的地方才能够提升自身的存在价值，我觉得对于不少人而言做IT 就是这么个东西，至少对于现在的我而言是这样的。&lt;/p&gt;
&lt;h2 id=&quot;三&quot;&gt;&lt;a href=&quot;#三&quot; class=&quot;headerlink&quot; title=&quot;三&quot;&gt;&lt;/a&gt;三&lt;/h2&gt;&lt;p&gt;说一些其他的事情吧。&lt;/p&gt;
&lt;h3 id=&quot;1-2&quot;&gt;&lt;a href=&quot;#1-2&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;最近开始变得越来越懒了，下班回来以后在群里扯扯淡，打开哔哩哔哩追追番，然后发呆一会儿，就到了睡觉的时间。然而就在三四个月前的时候还经常晚上在电脑前敲代码很久，那个时期我真的会去认认真真的花上业余时间去学一些东西。当然现在也想学一些东西，例如Java，例如服务器端开发，例如NodeJS，有一段时间还曾经想学Common Lisp，然而这些东西我都没有认真的开始学过。有时候也在想，以后转行该怎么办，总得有一门拿得出手的手艺，所以总得有一个确定而且熟悉的方向。然而又转念一想，以后做什么还都是未知，也没有必要非得这么着急去学精一门技能吧。&lt;/p&gt;
&lt;p&gt;我说不好这中间到底有什么改变了，然而相对于学习新的知识，能够生活的轻松一点成了我当下切实的愿望。&lt;/p&gt;
&lt;h3 id=&quot;2-2&quot;&gt;&lt;a href=&quot;#2-2&quot; class=&quot;headerlink&quot; title=&quot;2&quot;&gt;&lt;/a&gt;2&lt;/h3&gt;&lt;p&gt;最近看了两部很喜欢的动画，一部是《为美好的世界献上祝福！》，另一部是《Re：从零开始的异世界生活》，两部动画都是发生在异世界的故事。在异世界中认识各式各样的人，发生各种各样的故事，因为不同的目的开始旅行，因为不同的目的停止旅行。大概我很喜欢这种浪漫主义的故事，所以这样的作品对我有着致命的诱惑力。然而如果真的说给我一次去异世界的机会，恐怕我不会踏上那段旅程吧。相对于一段全新的生活，现代科技和文明带来的生活保障恐怕重要的多。然而我还是无法抵挡任何“异世界中踏上旅途”的设定，这种作品对我而言可以说是精神鸦片一样的存在。&lt;/p&gt;
&lt;p&gt;大约我的生活太缺少这样非日常的元素了。&lt;/p&gt;
&lt;h2 id=&quot;序&quot;&gt;&lt;a href=&quot;#序&quot; class=&quot;headerlink&quot; title=&quot;序&quot;&gt;&lt;/a&gt;序&lt;/h2&gt;&lt;p&gt;说一下现在吧。&lt;/p&gt;
&lt;p&gt;在学生时代我大约会很喜欢说自己的现在，然而此时此刻却写不出什么东西——现在就那样，没啥好说的。然而无论自己觉得现在的生活是否有意义，我所做的琐事也会一点点构建自身，像开头说的那样，三年后这些琐事也会构成我的一部分吧。&lt;/p&gt;
&lt;p&gt;说来也巧，也正是三年前我开始尝试着去看动漫，此后一发不可收拾。当时很喜欢的一部作品是奈绪蘑菇的《空之境界》，这部作品本篇一共三本小说，后来蘑菇又写了《空之境界 未来福音》作为故事的补完。《未来福音》的画廊中讲了式和干也在《矛盾螺旋》之后的新年里去神社做参拜的故事，在矛盾螺旋事件结束后，式和干也在新年参拜中各自许下自己的新年愿望。当面对式“肯定又是类似世界和平之类”的玩笑时，干也让人很舒服的笑着说“嘛，差不多吧”，然后一句画外音让我至今难忘。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;惟愿你与围绕你的这个世界，未来也能一直幸福下去。&lt;/p&gt;
&lt;p&gt;祈愿中满溢着来自未来的福音。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h2&gt;&lt;p&gt;说一下最近发生的两件事吧。&lt;/p&gt;
&lt;h3 id=&quot;1&quot;&gt;&lt;a href=&quot;#1&quot; class=&quot;headerlink&quot; title=&quot;1&quot;&gt;&lt;/a&gt;1&lt;/h3&gt;&lt;p&gt;第一件事是在Github 上找到了自己三年前用的一些配置文件，于是晚上本地拉了一个空分支fetch 下来后push 了上去。因为整套配置文件都是用软连接分发的，而目录架构又三年多没有变过，所以当想用Vim 打开里面的配置看看当时写成什么样子的时候，却看到了一个很陌生的界面。因为仓库检出到了三年前的分支，所以我看到了三年前自己使用的Vim。&lt;/p&gt;
&lt;p&gt;三年前我用着这个配置写过什么东西，最后那些事情也构成了现在的我。&lt;/p&gt;
    
    </summary>
    
      <category term="节" scheme="https://arondight.github.io/categories/%E8%8A%82/"/>
    
    
      <category term="随笔" scheme="https://arondight.github.io/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>使用GPG签名Git提交和标签</title>
    <link href="https://arondight.github.io/2016/04/17/%E4%BD%BF%E7%94%A8GPG%E7%AD%BE%E5%90%8DGit%E6%8F%90%E4%BA%A4%E5%92%8C%E6%A0%87%E7%AD%BE/"/>
    <id>https://arondight.github.io/2016/04/17/使用GPG签名Git提交和标签/</id>
    <published>2016-04-17T06:16:53.000Z</published>
    <updated>2016-05-23T15:28:56.310Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Pretty-Good-Privacy&quot;&gt;&lt;a href=&quot;#Pretty-Good-Privacy&quot; class=&quot;headerlink&quot; title=&quot;Pretty Good Privacy&quot;&gt;&lt;/a&gt;Pretty Good Privacy&lt;/h2&gt;&lt;h3 id=&quot;GPG-是什么&quot;&gt;&lt;a href=&quot;#GPG-是什么&quot; class=&quot;headerlink&quot; title=&quot;GPG 是什么&quot;&gt;&lt;/a&gt;GPG 是什么&lt;/h3&gt;&lt;p&gt;提GPG 之前需要提一个软件叫PGP。PGP 是“Pretty Good Privacy” 的缩写，中文直译为“完美隐私”，名字言简意赅，上来就把软件的用途拍用户脸上。然而PGP 不是自由软件，所以自由软件基金会决定开发一个替代PGP 的自由软件，于是有了GPG（GnuPG）。&lt;/p&gt;
&lt;p&gt;GPG 可以提供对信息、文件的签名和验证，或者是加密和解密，主要用于不安全网络上的信息传输。为此GPG 需要一个密钥环，GPG 使用私钥和公钥分别完成签名和加密，对应地验证和解密由公钥和私钥完成。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;主钥、从钥、公钥、私钥&quot;&gt;&lt;a href=&quot;#主钥、从钥、公钥、私钥&quot; class=&quot;headerlink&quot; title=&quot;主钥、从钥、公钥、私钥&quot;&gt;&lt;/a&gt;主钥、从钥、公钥、私钥&lt;/h3&gt;&lt;p&gt;然而GPG 密钥环并不只有一对公钥和私钥，如果称公钥和其对应的私钥为一个密钥对的话，那么一个GPG 密钥环可以拥有很多个密钥对，每一个密钥对都由一个钥匙号（key ID）标识，被称为钥匙。其中有一个钥匙拥有签名其他钥匙的功能（可以在密钥环中创建钥匙），这个钥匙被称为主钥，其他的钥匙则被称为从钥。&lt;/p&gt;
&lt;p&gt;下面列出了我在使用的一个密钥环，首先是公钥。&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --list-keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;/home/&amp;lt;user&amp;gt;/.gnupg/pubring.kbx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pub   rsa4096/B66CC194 2016-04-15 [SC]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid         [ 绝对 ] Arondight &amp;lt;shell&lt;span class=&quot;emphasis&quot;&gt;_way@foxmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub   rsa4096/F96E3CB7 2016-04-15 [E]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后是私钥。&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --list-secret-keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;/home/&amp;lt;user&amp;gt;/.gnupg/pubring.kbx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sec   rsa4096/B66CC194 2016-04-15 [SC]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid         [ 绝对 ] Arondight &amp;lt;shell&lt;span class=&quot;emphasis&quot;&gt;_way@foxmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssb   rsa4096/F96E3CB7 2016-04-15 [E]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;GPG 列出的每个密钥环第一行一定是主钥，其余的则为从钥，可以看到上面的密钥环中只有一个主钥和一个从钥。每个密钥后面有许多信息描述它的属性，例如&lt;code&gt;sec   rsa4096/B66CC194 2016-04-15 [SC]&lt;/code&gt; 代表这是一个主钥的私钥，加密算法为rsa，长度4096 位，主钥的钥匙号为&lt;code&gt;B66CC194&lt;/code&gt;，创建于2016 年4 月15 日，功能为&lt;code&gt;SC&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;不难看出一个GPG 密钥环一共有四种类型的密钥，如果按照上面指令的样例输出来看的话则如下表。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;代表&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;sec&lt;/td&gt;
&lt;td&gt;SECret key&lt;/td&gt;
&lt;td&gt;主钥的私钥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pub&lt;/td&gt;
&lt;td&gt;PUBlic key&lt;/td&gt;
&lt;td&gt;主钥的公钥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ssb&lt;/td&gt;
&lt;td&gt;Secret SuBkey&lt;/td&gt;
&lt;td&gt;从钥的私钥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sub&lt;/td&gt;
&lt;td&gt;public SUBkey&lt;/td&gt;
&lt;td&gt;从钥的公钥&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;至于这些钥匙的作用可以查看它们的功能，常用的功能有三种。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;功能&lt;/th&gt;
&lt;th&gt;代表&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;S&lt;/td&gt;
&lt;td&gt;Signing&lt;/td&gt;
&lt;td&gt;签名和验证信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;E&lt;/td&gt;
&lt;td&gt;Encryption&lt;/td&gt;
&lt;td&gt;加密和解密信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;Certification&lt;/td&gt;
&lt;td&gt;签名和验证钥匙&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意功能是针对一个钥匙而言的，由其中的公钥和私钥共同完成。其中加密和解密分别由钥匙的公钥和私钥完成，签名和验证则分别由私钥和公钥完成。一般地，GPG 密钥环中钥匙的公钥需要公布到网络上，也就意味着：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;所有人都能用你公布的公钥加密信息，加密后的信息只有持有私钥的你才能够解密。&lt;/li&gt;
&lt;li&gt;你可以使用自己持有的私钥签名信息，所有人都能够用你公布的公钥验证签名的合法性。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;默认地，GPG 生成的密钥环，主钥用于签名和验证，从钥用于加密和解密。&lt;/p&gt;
&lt;h2 id=&quot;签名&quot;&gt;&lt;a href=&quot;#签名&quot; class=&quot;headerlink&quot; title=&quot;签名&quot;&gt;&lt;/a&gt;签名&lt;/h2&gt;&lt;h3 id=&quot;生成密钥&quot;&gt;&lt;a href=&quot;#生成密钥&quot; class=&quot;headerlink&quot; title=&quot;生成密钥&quot;&gt;&lt;/a&gt;生成密钥&lt;/h3&gt;&lt;p&gt;首先需要生成一个GPG 密钥环，GPG 在生成密钥的时候会使用一个根据你的操作生成的随机数，所以你可以在GPG 生成密钥的时候多做一些操作，例如点鼠标、敲键盘、复制文件等等。你可以利用&lt;code&gt;dd&lt;/code&gt; 指令在生成密钥的期间做一些读写操作以让随机数字发生器获得足够的熵数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo dd &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;random &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt;=&lt;span class=&quot;regexp&quot;&gt;/dev/&lt;/span&gt;&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; bs=&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;M&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后可以生成GPG 密钥环，推荐使用&lt;code&gt;--full-gen-key&lt;/code&gt; 选项来启用所有的功能。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg &lt;span class=&quot;comment&quot;&gt;--full-gen-key&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中需要注意的事情有以下几项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;密钥种类：形如&lt;code&gt;method1 and method2&lt;/code&gt; 的选项是生成主钥和一个从钥，默认可以用于签名和加密，形如&lt;code&gt;method&lt;/code&gt; 的选项只生成主钥，默认只能用于签名。&lt;/li&gt;
&lt;li&gt;密钥长度：越长越安全，同时加密解密的时间花费越多，选择一个你认为合理的长度。&lt;/li&gt;
&lt;li&gt;有效期限：你需要选择一个你认为合理的有效期限，钥匙到期后，签名将失效，GPG 服务器也会删除其公钥，所以一般来说你需要使用一个永不过期的钥匙。&lt;/li&gt;
&lt;li&gt;钥匙密码：一定要为你的钥匙设置一个足够强壮的密码！&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;上传公钥到服务器&quot;&gt;&lt;a href=&quot;#上传公钥到服务器&quot; class=&quot;headerlink&quot; title=&quot;上传公钥到服务器&quot;&gt;&lt;/a&gt;上传公钥到服务器&lt;/h3&gt;&lt;p&gt;现在你可以将你的公钥上传到任意GPG 服务器上了，这可以方便他人导入公钥以验证你的签名。通过服务器的交换机制，全球所有的GPG 服务器都会得到你的公钥。你可以列出你现在所拥有的公钥。&lt;/p&gt;
&lt;figure class=&quot;highlight asciidoc&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --list-keys&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;/home/&amp;lt;user&amp;gt;/.gnupg/pubring.kbx&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---------------------------------&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pub   rsa4096/B66CC194 2016-04-15 [SC]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;uid         [ 绝对 ] Arondight &amp;lt;shell&lt;span class=&quot;emphasis&quot;&gt;_way@foxmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub   rsa4096/F96E3CB7 2016-04-15 [E]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到两个公钥，分别属于主钥&lt;code&gt;B66CC194&lt;/code&gt; 和从钥&lt;code&gt;F96E3CB7&lt;/code&gt;。上传时指定主钥的钥匙号（key ID）即可，GPG 会将密钥环中的公钥上传到指定的服务器。&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --keyserver &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;.gnupg.net --send-&lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;上传公钥到GitHub&quot;&gt;&lt;a href=&quot;#上传公钥到GitHub&quot; class=&quot;headerlink&quot; title=&quot;上传公钥到GitHub&quot;&gt;&lt;/a&gt;上传公钥到GitHub&lt;/h3&gt;&lt;p&gt;GitHub 刚刚发布了支持GPG 签名的消息，所以你可以选择使用GitHub 托管你的仓库。首先你需要以文本形式导出你主钥的公钥。&lt;/p&gt;
&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg -&lt;span class=&quot;selector-tag&quot;&gt;a&lt;/span&gt; -o gnupg&lt;span class=&quot;selector-class&quot;&gt;.pub&lt;/span&gt; --export &amp;lt;key ID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后打开你的GitHub &lt;a href=&quot;https://github.com/settings/keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;密钥管理&lt;/a&gt;界面，根据文件&lt;code&gt;gnupg.pub&lt;/code&gt; 为你的GitHub 账户配置用于验证签名的公钥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：这一步不是必须的，你不一定要使用GitHub，或许你更喜欢使用其他的商业产品，或者自己搭建一个Git 服务器。Git 本身就是支持GPG 签名的，GitHub 对GPG 的支持仅是把验证结果在网页上显示出来（使用你上传的公钥）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;导出指纹&quot;&gt;&lt;a href=&quot;#导出指纹&quot; class=&quot;headerlink&quot; title=&quot;导出指纹&quot;&gt;&lt;/a&gt;导出指纹&lt;/h3&gt;&lt;p&gt;然而不幸的是，任何人都可以冒充你的名义上传公钥到GPG 服务器，所以对方搜到以你的名义发布的公钥，不一定真的是你发布的。为了避免这个问题，你需要公布主钥的指纹。GPG 导入公钥后需要手动设置信任度。这时候对方就可以通过对比计算得到的主钥指纹和你提供的主钥指纹，来确定导入的主钥的合法性。&lt;/p&gt;
&lt;p&gt;你可以像下面一样导出指纹。&lt;/p&gt;
&lt;figure class=&quot;highlight ada&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ LANG=en_US gpg &lt;span class=&quot;comment&quot;&gt;--fingerprint &amp;lt;key ID&amp;gt; &amp;gt;fingerprint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后将&lt;code&gt;fingerprint&lt;/code&gt; 文件提交到你的项目仓库中，或者公布在网络的其他位置。&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;你只需（只能）导出主钥的指纹，对方也只需要验证主钥的指纹，因为主钥的公钥可以验证从钥。&lt;/li&gt;
&lt;li&gt;你可以通过&lt;code&gt;--export-ownertrust&lt;/code&gt; 和&lt;code&gt;--import-ownertrust&lt;/code&gt; 来直接导出和导入信任度，但是不推荐这样做。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;签名提交和标签&quot;&gt;&lt;a href=&quot;#签名提交和标签&quot; class=&quot;headerlink&quot; title=&quot;签名提交和标签&quot;&gt;&lt;/a&gt;签名提交和标签&lt;/h3&gt;&lt;p&gt;首先你需要为Git 设置一个用于签名的私钥，通常来说所有的个人项目都用一个私钥进行签名，所以建议设置为全局配置。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --global &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;.signingkey &lt;span class=&quot;variable&quot;&gt;&amp;lt;key ID&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后就可以使用这个私钥来签名提交。&lt;/p&gt;
&lt;figure class=&quot;highlight cos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -&lt;span class=&quot;keyword&quot;&gt;S&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者签名标签了。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;-s&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你想全局默认使用GPG 签名提交，可以全局将&lt;code&gt;commit.gpgsign&lt;/code&gt; 设置为&lt;code&gt;true&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight autoit&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config --&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt; commit.gpgsign &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关于私钥&quot;&gt;&lt;a href=&quot;#关于私钥&quot; class=&quot;headerlink&quot; title=&quot;关于私钥&quot;&gt;&lt;/a&gt;关于私钥&lt;/h3&gt;&lt;p&gt;任何情况向下都不要把私钥泄露给除了你之外的任何人。如果需要向对方发送加密信息，请让对方提供指纹，导入对方的公钥进行加密，而不要用自己的公钥加密后再把自己的私钥发送过去。&lt;/p&gt;
&lt;h2 id=&quot;验证&quot;&gt;&lt;a href=&quot;#验证&quot; class=&quot;headerlink&quot; title=&quot;验证&quot;&gt;&lt;/a&gt;验证&lt;/h2&gt;&lt;h3 id=&quot;获得公钥&quot;&gt;&lt;a href=&quot;#获得公钥&quot; class=&quot;headerlink&quot; title=&quot;获得公钥&quot;&gt;&lt;/a&gt;获得公钥&lt;/h3&gt;&lt;p&gt;你可以根据你得到的信息在任何GPG 服务器上查找对应的公钥，典型的例如查看指纹，然后根据指纹到服务器上查找钥匙号。&lt;/p&gt;
&lt;figure class=&quot;highlight q&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --keyserver &lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt;.gnupg.net --search-&lt;span class=&quot;built_in&quot;&gt;keys&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;选择对应的编号，会自动下载并导入该公钥。你也可以根据用户名和邮箱进行查找。&lt;/p&gt;
&lt;h3 id=&quot;设置信任&quot;&gt;&lt;a href=&quot;#设置信任&quot; class=&quot;headerlink&quot; title=&quot;设置信任&quot;&gt;&lt;/a&gt;设置信任&lt;/h3&gt;&lt;p&gt;导入后的公钥需要设置信任度才能使用该公钥进行验证，你可以通过类似下面的指令编辑该公钥的信息。&lt;/p&gt;
&lt;figure class=&quot;highlight gauss&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ gpg --&lt;span class=&quot;keyword&quot;&gt;edit&lt;/span&gt;-&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; &amp;lt;&lt;span class=&quot;built_in&quot;&gt;key&lt;/span&gt; ID&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你所看到的应该是一个文本交互界面，下面是一个样例。&lt;/p&gt;
&lt;figure class=&quot;highlight livescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;gpg (GnuPG) &lt;span class=&quot;number&quot;&gt;2.1&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;; Copyright (C) &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt; Free Software Foundation, Inc.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;This &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; free software: you are free &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; change &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; redistribute &lt;span class=&quot;literal&quot;&gt;it&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;There &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; NO WARRANTY, &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; the extent permitted &lt;span class=&quot;keyword&quot;&gt;by&lt;/span&gt; law.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pub  rsa4096/B66CC194&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     创建于：&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;  有效至：永不过期  可用于：SC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     信任度：未知        有效性：未知&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sub  rsa4096/F96E3CB7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     创建于：&lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;04&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;  有效至：永不过期  可用于：E&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[ 未知 ] (&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;). Arondight &amp;lt;shell_way@foxmail.com&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;gpg&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你可以键入&lt;code&gt;fpr&lt;/code&gt; 来打印这个主钥的指纹，和你得到的主钥指纹进行对比，如果一致则键入&lt;code&gt;trust&lt;/code&gt; 来设置主钥的信任度。如果主钥被设置为绝对可信的（ultimately），GPG 会根据主钥的公钥验证从钥的签名，最终完成信任建立。最后键入&lt;code&gt;quit&lt;/code&gt; 退出。&lt;/p&gt;
&lt;h3 id=&quot;验证签名&quot;&gt;&lt;a href=&quot;#验证签名&quot; class=&quot;headerlink&quot; title=&quot;验证签名&quot;&gt;&lt;/a&gt;验证签名&lt;/h3&gt;&lt;p&gt;现在你可以用导入的公钥来验证你&lt;code&gt;git clone&lt;/code&gt; 下来的仓库的提交和标签了，同样你需要首先告诉Git 应该使用哪个公钥对这个仓库进行验证。一般来说不同作者的项目公钥都不同，建议不要将用于验证的公钥设置为全局。&lt;/p&gt;
&lt;figure class=&quot;highlight pf&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git config &lt;span class=&quot;keyword&quot;&gt;user&lt;/span&gt;.signingkey &lt;span class=&quot;variable&quot;&gt;&amp;lt;key ID&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后可以像下面这样验证一个提交。&lt;/p&gt;
&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git verify-&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; &amp;lt;&lt;span class=&quot;keyword&quot;&gt;commit&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;ID&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者验证一个标签。&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;tag&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;-v&lt;/span&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;tag&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;扩展阅读&quot;&gt;&lt;a href=&quot;#扩展阅读&quot; class=&quot;headerlink&quot; title=&quot;扩展阅读&quot;&gt;&lt;/a&gt;扩展阅读&lt;/h2&gt;&lt;h3 id=&quot;签名和验证&quot;&gt;&lt;a href=&quot;#签名和验证&quot; class=&quot;headerlink&quot; title=&quot;签名和验证&quot;&gt;&lt;/a&gt;签名和验证&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;二进制方式签名文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg -u &amp;lt;key ID&amp;gt; -s &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;纯文本方式签名文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg -u &amp;lt;key ID&amp;gt; --clearsign &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;签名文件并独立存放签名&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg -u &amp;lt;key ID&amp;gt; --detach-sign &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;验证文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg --verify-files &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;通过独立的签名文件验证文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg --verify-files &amp;lt;file_sig&amp;gt; &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;如果不指定&lt;code&gt;-u&lt;/code&gt; 选项，会使用第一个密钥环中主钥的私钥进行签名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;加密和解密&quot;&gt;&lt;a href=&quot;#加密和解密&quot; class=&quot;headerlink&quot; title=&quot;加密和解密&quot;&gt;&lt;/a&gt;加密和解密&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;动作&lt;/th&gt;
&lt;th&gt;指令&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;二进制方式加密文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg -r &amp;lt;key ID&amp;gt; -e &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;纯文本方式加密文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg -r &amp;lt;key ID&amp;gt; -a -e &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;解密文件&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gpg &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;这里你需要指定从钥的钥匙号，如果&lt;code&gt;-r&lt;/code&gt; 选项被省略，GPG 会交互式的请求一个钥匙号。&lt;/li&gt;
&lt;li&gt;如果你想在加密的同时签名文件，在加密指令中额外指定一个&lt;code&gt;-s&lt;/code&gt; 选项。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Pretty-Good-Privacy&quot;&gt;&lt;a href=&quot;#Pretty-Good-Privacy&quot; class=&quot;headerlink&quot; title=&quot;Pretty Good Privacy&quot;&gt;&lt;/a&gt;Pretty Good Privacy&lt;/h2&gt;&lt;h3 id=&quot;GPG-是什么&quot;&gt;&lt;a href=&quot;#GPG-是什么&quot; class=&quot;headerlink&quot; title=&quot;GPG 是什么&quot;&gt;&lt;/a&gt;GPG 是什么&lt;/h3&gt;&lt;p&gt;提GPG 之前需要提一个软件叫PGP。PGP 是“Pretty Good Privacy” 的缩写，中文直译为“完美隐私”，名字言简意赅，上来就把软件的用途拍用户脸上。然而PGP 不是自由软件，所以自由软件基金会决定开发一个替代PGP 的自由软件，于是有了GPG（GnuPG）。&lt;/p&gt;
&lt;p&gt;GPG 可以提供对信息、文件的签名和验证，或者是加密和解密，主要用于不安全网络上的信息传输。为此GPG 需要一个密钥环，GPG 使用私钥和公钥分别完成签名和加密，对应地验证和解密由公钥和私钥完成。&lt;/p&gt;
    
    </summary>
    
      <category term="技术" scheme="https://arondight.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Git" scheme="https://arondight.github.io/tags/Git/"/>
    
      <category term="GPG" scheme="https://arondight.github.io/tags/GPG/"/>
    
      <category term="GitHub" scheme="https://arondight.github.io/tags/GitHub/"/>
    
  </entry>
  
  <entry>
    <title>计算IP、ICMP、TCP和UDP包的校验和</title>
    <link href="https://arondight.github.io/2016/03/22/%E8%AE%A1%E7%AE%97IP%E3%80%81ICMP%E3%80%81TCP%E5%92%8CUDP%E5%8C%85%E7%9A%84%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
    <id>https://arondight.github.io/2016/03/22/计算IP、ICMP、TCP和UDP包的校验和/</id>
    <published>2016-03-22T12:06:40.000Z</published>
    <updated>2016-05-23T15:28:56.310Z</updated>
    
    <content type="html">&lt;h2 id=&quot;校验和算法&quot;&gt;&lt;a href=&quot;#校验和算法&quot; class=&quot;headerlink&quot; title=&quot;校验和算法&quot;&gt;&lt;/a&gt;校验和算法&lt;/h2&gt;&lt;p&gt;校验和的计算方法在文档&lt;a href=&quot;https://tools.ietf.org/html/rfc1071&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 1071&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1)  Adjacent octets to be checksummed are paired to form 16-bit&lt;br&gt;     integers, and the 1’s complement sum of these 16-bit integers is&lt;br&gt;     formed.&lt;/p&gt;
&lt;p&gt;(2)  To generate a checksum, the checksum field itself is cleared,&lt;br&gt;     the 16-bit 1’s complement sum is computed over the octets&lt;br&gt;     concerned, and the 1’s complement of this sum is placed in the&lt;br&gt;     checksum field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;即首先将校验和字段清零，将待求和数据调整为偶数字节（如为奇数字节则最后一个字节扩展为字）。然后用反码相加法（进位加到低位上）、以字为单位累加待求和数据。最后将累加结果取反并截低16 位作为校验和。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;之所以使用反码相加法，是为了让计算结果和网络序或主机序无关。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;根据这个规则，计算校验和的的C 语言函数可以做如下实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;GetChecksum (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; addr, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; bytes)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; checksum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; nleft;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert (addr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  assert (bytes &amp;gt; &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt; - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  word = (&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; *)addr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  nleft = bytes;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 使用32 位累加器，顺序累加16 位数据，进位保存在高16 位 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (sum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; nleft &amp;gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; nleft -=&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      sum += *word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ++word;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 如果总字节为奇数则处理最后一个字节 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum += nleft ? *(&lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; *)word : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 将进位加到低16 位，并将本次计算产生的进位再次加到低16 位 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum = (sum &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;) + (sum &amp;amp; &lt;span class=&quot;number&quot;&gt;0xffff&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  sum += (sum &amp;gt;&amp;gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/* 结果取反并截低16 位为校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; checksum = ~sum;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面会使用这个校验和计算函数分别计算IP、ICMP、TCP和UDP 包的校验和。&lt;/p&gt;
&lt;h2 id=&quot;IP-包校验和的计算&quot;&gt;&lt;a href=&quot;#IP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;IP 包校验和的计算&quot;&gt;&lt;/a&gt;IP 包校验和的计算&lt;/h2&gt;&lt;p&gt;IP 包校验和的计算范围在&lt;a href=&quot;https://tools.ietf.org/html/rfc791&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 791&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   The checksum field is the 16 bit one’s complement of the one’s&lt;br&gt;   complement sum of all 16 bit words in the header.  For purposes of&lt;br&gt;   computing the checksum, the value of the checksum field is zero.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即IP 包的校验和只计算包头。&lt;/p&gt;
&lt;p&gt;根据描述，IP 包的校验和可用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ipheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充ipheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算该IP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader-&amp;gt;check = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader-&amp;gt;check = GetChecksum (ipheader, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;ICMP-包校验和的计算&quot;&gt;&lt;a href=&quot;#ICMP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;ICMP 包校验和的计算&quot;&gt;&lt;/a&gt;ICMP 包校验和的计算&lt;/h2&gt;&lt;p&gt;ICMP 包校验和的计算范围在&lt;a href=&quot;https://tools.ietf.org/html/rfc792&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 792&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;   The checksum is the 16-bit ones’s complement of the one’s&lt;br&gt;   complement sum of the ICMP message starting with the ICMP Type.&lt;br&gt;   For computing the checksum , the checksum field should be zero.&lt;br&gt;   This checksum may be replaced in the future.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;即ICMP 包的计算范围包括包头和数据。&lt;/p&gt;
&lt;p&gt;根据描述，假设IP 包校验和已经计算完毕，那么其中的ICMP 包校验和可以用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmphdr *icmpheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; ipheaderSize = &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; icmphdr *)(packet + ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充icmpheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算该ICMP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader-&amp;gt;checksum = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;icmpheader-&amp;gt;checksum = GetChecksum (icmpheader, packetSize - ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;TCP-和UDP-包校验和的计算&quot;&gt;&lt;a href=&quot;#TCP-和UDP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;TCP 和UDP 包校验和的计算&quot;&gt;&lt;/a&gt;TCP 和UDP 包校验和的计算&lt;/h2&gt;&lt;h3 id=&quot;伪首部&quot;&gt;&lt;a href=&quot;#伪首部&quot; class=&quot;headerlink&quot; title=&quot;伪首部&quot;&gt;&lt;/a&gt;伪首部&lt;/h3&gt;&lt;p&gt;TCP 和UDP 校验和的计算要稍微麻烦一些，因为需要引入一个伪首部（pseudo header），伪首部的结构在&lt;a href=&quot;https://tools.ietf.org/html/rfc768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 768&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; The pseudo  header  conceptually prefixed to the UDP header contains the&lt;br&gt; source  address,  the destination  address,  the protocol,  and the  UDP&lt;br&gt; length.   This information gives protection against misrouted datagrams.&lt;br&gt; This checksum procedure is the same as is used in TCP.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 0      7 8     15 16    23 24    31
+--------+--------+--------+--------+
|          source address           |
+--------+--------+--------+--------+
|        destination address        |
+--------+--------+--------+--------+
|  zero  |protocol|   UDP length    |
+--------+--------+--------+--------+
&lt;/code&gt;&lt;/pre&gt;&lt;/blockquote&gt;
&lt;p&gt;可见TCP 和UDP 的伪首部结构完全一致。&lt;/p&gt;
&lt;p&gt;根据描述，伪首部的结构可以用C 语言结构体做如下实现。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; pseudohdr&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; src;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint32_t&lt;/span&gt; dst;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; zero;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint8_t&lt;/span&gt; protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;uint16_t&lt;/span&gt; len;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;TCP-包校验和的计算&quot;&gt;&lt;a href=&quot;#TCP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;TCP 包校验和的计算&quot;&gt;&lt;/a&gt;TCP 包校验和的计算&lt;/h3&gt;&lt;p&gt;TCP 包校验和的计算方法在&lt;a href=&quot;https://tools.ietf.org/html/rfc793&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 793&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; The checksum field is the 16 bit one’s complement of the one’s&lt;br&gt; complement sum of all 16 bit words in the header and text.  If a&lt;br&gt; segment contains an odd number of header and text octets to be&lt;br&gt; checksummed, the last octet is padded on the right with zeros to&lt;br&gt; form a 16 bit word for checksum purposes.  The pad is not&lt;br&gt; transmitted as part of the segment.  While computing the checksum,&lt;br&gt; the checksum field itself is replaced with zeros.&lt;/p&gt;
&lt;p&gt;   The checksum also covers a 96 bit pseudo header conceptually&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;可见，算法和之前提到的校验和算法完全一致，根据描述校验和的计算需要包含伪首部和整个TCP 包。&lt;/p&gt;
&lt;p&gt;根据描述，假设IP 包校验和已经计算完毕，那么其中的TCP 包校验和可以用C 语言做如下计算。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *tcpsumblock;          &lt;span class=&quot;comment&quot;&gt;/* 伪首部 + TCP 头 + 数据 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *ipheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr *tcpheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt; pseudoheader;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;size_t&lt;/span&gt; ipheaderSize = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ipheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; iphdr *)packet;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader = (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr *)(packet + ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充tcpheader... */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充pseudoheader */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.src = ipheader-&amp;gt;saddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.dst = ipheader-&amp;gt;daddr;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.zero = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.protocol = ipheader-&amp;gt;protocol;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pseudoheader.len = htons (&lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; tcphdr));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 填充tcpsumblock */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader-&amp;gt;check = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpsumblock = (&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; *)&lt;span class=&quot;built_in&quot;&gt;malloc&lt;/span&gt; (packetSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt; (tcpsumblock, &amp;amp;pseudoheader, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;memcpy&lt;/span&gt; (tcpsumblock + &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;), packet, packetSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/* 计算TCP 包校验和 */&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpheader-&amp;gt;check =&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  GetChecksum (tcpsumblock, &lt;span class=&quot;keyword&quot;&gt;sizeof&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;pseudohdr_t&lt;/span&gt;) + packetSize - ipheaderSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;free&lt;/span&gt; (tcpsumblock);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tcpsumblock = &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;UDP-包校验和的计算&quot;&gt;&lt;a href=&quot;#UDP-包校验和的计算&quot; class=&quot;headerlink&quot; title=&quot;UDP 包校验和的计算&quot;&gt;&lt;/a&gt;UDP 包校验和的计算&lt;/h3&gt;&lt;p&gt;UDP 包校验和的计算方法在&lt;a href=&quot;https://tools.ietf.org/html/rfc768&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RFC 768&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; Checksum is the 16-bit one’s complement of the one’s complement sum of a&lt;br&gt; pseudo header of information from the IP header, the UDP header, and the&lt;br&gt; data,  padded  with zero octets  at the end (if  necessary)  to  make  a&lt;br&gt; multiple of two octets.&lt;/p&gt;
&lt;p&gt;The pseudo  header  conceptually prefixed to the UDP header contains the&lt;br&gt;source  address,  the destination  address,  the protocol,  and the  UDP&lt;br&gt;length.   This information gives protection against misrouted datagrams.&lt;br&gt;This checksum procedure is the same as is used in TCP.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以UDP 包校验和的计算方法和TCP 包如出一辙，同样包含了一个伪首部。&lt;/p&gt;
&lt;p&gt;具体的实现可以参考之前计算TCP 包校验的C 语言实现。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;校验和算法&quot;&gt;&lt;a href=&quot;#校验和算法&quot; class=&quot;headerlink&quot; title=&quot;校验和算法&quot;&gt;&lt;/a&gt;校验和算法&lt;/h2&gt;&lt;p&gt;校验和的计算方法在文档&lt;a href=&quot;https://tools.ietf.org/html/rfc1071&quot;&gt;RFC 1071&lt;/a&gt; 中有如下说明：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(1)  Adjacent octets to be checksummed are paired to form 16-bit&lt;br&gt;     integers, and the 1’s complement sum of these 16-bit integers is&lt;br&gt;     formed.&lt;/p&gt;
&lt;p&gt;(2)  To generate a checksum, the checksum field itself is cleared,&lt;br&gt;     the 16-bit 1’s complement sum is computed over the octets&lt;br&gt;     concerned, and the 1’s complement of this sum is placed in the&lt;br&gt;     checksum field.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="技术" scheme="https://arondight.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="网络协议" scheme="https://arondight.github.io/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
      <category term="IP" scheme="https://arondight.github.io/tags/IP/"/>
    
      <category term="TCP" scheme="https://arondight.github.io/tags/TCP/"/>
    
      <category term="ICMP" scheme="https://arondight.github.io/tags/ICMP/"/>
    
      <category term="UDP" scheme="https://arondight.github.io/tags/UDP/"/>
    
      <category term="校验和" scheme="https://arondight.github.io/tags/%E6%A0%A1%E9%AA%8C%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>使用SSH反向隧道进行内网穿透</title>
    <link href="https://arondight.github.io/2016/02/17/%E4%BD%BF%E7%94%A8SSH%E5%8F%8D%E5%90%91%E9%9A%A7%E9%81%93%E8%BF%9B%E8%A1%8C%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    <id>https://arondight.github.io/2016/02/17/使用SSH反向隧道进行内网穿透/</id>
    <published>2016-02-17T10:09:57.000Z</published>
    <updated>2016-05-23T15:28:56.310Z</updated>
    
    <content type="html">&lt;h2 id=&quot;对应的情况&quot;&gt;&lt;a href=&quot;#对应的情况&quot; class=&quot;headerlink&quot; title=&quot;对应的情况&quot;&gt;&lt;/a&gt;对应的情况&lt;/h2&gt;&lt;p&gt;这篇文章主要介绍了如何利用SSH 反向隧道穿透NAT，并演示了如何维持一条稳定的SSH 隧道。&lt;/p&gt;
&lt;p&gt;假设有机器A 和B，A 有公网IP，B 位于NAT 之后并无可用的端口转发，现在想由A 主动向B 发起SSH 连接。由于B 在NAT 后端，无可用&lt;strong&gt;公网IP + 端口&lt;/strong&gt; 这样一个组合，所以A 无法穿透NAT，这篇文章应对的就是这种情况。&lt;/p&gt;
&lt;p&gt;首先有如下约定，因为很重要所以放在前面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器代号&lt;/th&gt;
&lt;th&gt;机器位置&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;账户&lt;/th&gt;
&lt;th&gt;ssh/sshd 端口&lt;/th&gt;
&lt;th&gt;是否需要运行sshd&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;位于公网&lt;/td&gt;
&lt;td&gt;a.site&lt;/td&gt;
&lt;td&gt;usera&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;userb&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;userc&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;blockquote&gt;
&lt;p&gt;这里默认你的系统init 程序为&lt;code&gt;systemd&lt;/code&gt;，如果你使用其他的init 程序，如果没有特殊理由还是换到一个现代化的GNU/Linux 系统吧……&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;SSH-反向隧道&quot;&gt;&lt;a href=&quot;#SSH-反向隧道&quot; class=&quot;headerlink&quot; title=&quot;SSH 反向隧道&quot;&gt;&lt;/a&gt;SSH 反向隧道&lt;/h2&gt;&lt;p&gt;这种手段实质上是由B 向A 主动地建立一个SSH 隧道，将A 的6766 端口转发到B 的22 端口上，只要这条隧道不关闭，这个转发就是有效的。有了这个端口转发，只需要访问A 的6766 端口反向连接B 即可。&lt;/p&gt;
&lt;p&gt;首先在&lt;strong&gt;B&lt;/strong&gt; 上建立一个SSH 隧道，将A 的6766 端口转发到B 的22 端口上：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh -p 22 -qngfNTR 6766:127.0.0.1:22 usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;strong&gt;A&lt;/strong&gt; 上利用6766 端口反向SSH 到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;要做的事情其实就是这么简单。&lt;/p&gt;
&lt;h2 id=&quot;隧道的维持&quot;&gt;&lt;a href=&quot;#隧道的维持&quot; class=&quot;headerlink&quot; title=&quot;隧道的维持&quot;&gt;&lt;/a&gt;隧道的维持&lt;/h2&gt;&lt;h3 id=&quot;稳定性维持&quot;&gt;&lt;a href=&quot;#稳定性维持&quot; class=&quot;headerlink&quot; title=&quot;稳定性维持&quot;&gt;&lt;/a&gt;稳定性维持&lt;/h3&gt;&lt;p&gt;然而不幸的是SSH 连接是会超时关闭的，如果连接关闭，隧道无法维持，那么A 就无法利用反向隧道穿透B 所在的NAT 了，为此我们需要一种方案来提供一条稳定的SSH 反向隧道。&lt;/p&gt;
&lt;p&gt;一个最简单的方法就是&lt;code&gt;autossh&lt;/code&gt;，这个软件会在超时之后自动重新建立SSH 隧道，这样就解决了隧道的稳定性问题，如果你使用&lt;a href=&quot;https://www.archlinux.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Arch Linux&lt;/a&gt;，你可以这样获得它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sudo pacman -S autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;下面在&lt;strong&gt;B&lt;/strong&gt; 上做之前类似的事情，不同的是该隧道会由&lt;code&gt;autossh&lt;/code&gt; 来维持：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ autossh -p 22 -M 6777 -NR 6766:127.0.0.1:22 usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;-M&lt;/code&gt; 参数指定的端口用来监听隧道的状态，与端口转发无关。&lt;/p&gt;
&lt;p&gt;之后你可以在A 上通过6766 端口访问B 了：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;隧道的自动建立&quot;&gt;&lt;a href=&quot;#隧道的自动建立&quot; class=&quot;headerlink&quot; title=&quot;隧道的自动建立&quot;&gt;&lt;/a&gt;隧道的自动建立&lt;/h3&gt;&lt;p&gt;然而这又有了另外一个问题，如果B 重启隧道就会消失。那么需要有一种手段在B 每次启动时使用&lt;code&gt;autossh&lt;/code&gt; 来建立SSH 隧道。很自然的一个想法就是做成服务，之后会给出在&lt;code&gt;systemd&lt;/code&gt; 下的一种解决方案。&lt;/p&gt;
&lt;h2 id=&quot;“打洞”&quot;&gt;&lt;a href=&quot;#“打洞”&quot; class=&quot;headerlink&quot; title=&quot;“打洞”&quot;&gt;&lt;/a&gt;“打洞”&lt;/h2&gt;&lt;p&gt;之所以标题这么起，是因为自己觉得这件事情有点类似于UDP 打洞，即通过一台在公网的机器，让两台分别位于各自NAT 之后的机器可以建立SSH 连接。&lt;/p&gt;
&lt;p&gt;下面演示如何使用SSH 反向隧道，让C 连接到B。&lt;/p&gt;
&lt;p&gt;首先在&lt;strong&gt;A&lt;/strong&gt; 上编辑&lt;code&gt;sshd&lt;/code&gt; 的配置文件&lt;code&gt;/etc/ssh/sshd_config&lt;/code&gt;，将&lt;code&gt;GatewayPorts&lt;/code&gt; 开关打开：&lt;/p&gt;
&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;GatewayPorts&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;yes&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后重启&lt;code&gt;sshd&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ sudo systemctl restart sshd&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上对之前用到的&lt;code&gt;autossh&lt;/code&gt; 指令略加修改：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ autossh -p 22 -M 6777 -NR &lt;span class=&quot;string&quot;&gt;&#39;*:6766:127.0.0.1:22&#39;&lt;/span&gt; usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;之后在&lt;strong&gt;C&lt;/strong&gt; 上利用&lt;strong&gt;A&lt;/strong&gt; 的6766 端口SSH 连接到&lt;strong&gt;B&lt;/strong&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C $ ssh -p 6766 userb@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;至此你已经轻而易举的穿透了两层NAT。&lt;/p&gt;
&lt;h2 id=&quot;最终的解决方案&quot;&gt;&lt;a href=&quot;#最终的解决方案&quot; class=&quot;headerlink&quot; title=&quot;最终的解决方案&quot;&gt;&lt;/a&gt;最终的解决方案&lt;/h2&gt;&lt;p&gt;整合一下前面提到的，最终的解决方案如下：&lt;/p&gt;
&lt;p&gt;首先打开&lt;strong&gt;A&lt;/strong&gt; 上&lt;code&gt;sshd&lt;/code&gt; 的&lt;code&gt;GatewayPorts&lt;/code&gt; 开关，并重启&lt;code&gt;sshd&lt;/code&gt;（如有需要）。&lt;/p&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上新建一个用户&lt;em&gt;autossh&lt;/em&gt;，根据权限最小化思想，B 上的&lt;code&gt;autossh&lt;/code&gt; 服务将以&lt;em&gt;autossh&lt;/em&gt; 用户的身份运行，以尽大可能避免出现安全问题：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo useradd -m autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo passwd autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;紧接着在&lt;strong&gt;B&lt;/strong&gt; 上为&lt;em&gt;autossh&lt;/em&gt; 用户创建SSH 密钥，并上传到A：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ su - autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh-keygen -t &lt;span class=&quot;string&quot;&gt;&#39;rsa&#39;&lt;/span&gt; -C &lt;span class=&quot;string&quot;&gt;&#39;autossh@B&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;B $ ssh-copy-id usera@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意该&lt;strong&gt;密钥不要设置密码&lt;/strong&gt;，也就是运行&lt;code&gt;ssh-keygen&lt;/code&gt; 指令时尽管一路回车，不要输入额外的字符。&lt;/p&gt;
&lt;p&gt;然后在&lt;strong&gt;B&lt;/strong&gt; 上创建以&lt;em&gt;autossh&lt;/em&gt; 用户权限调用&lt;code&gt;autossh&lt;/code&gt; 的service 文件。将下面文本写入到文件&lt;code&gt;/lib/systemd/system/autossh.service&lt;/code&gt;，并设置权限为644：&lt;/p&gt;
&lt;figure class=&quot;highlight ini&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;[Unit]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Description&lt;/span&gt;=Auto SSH Tunnel&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;After&lt;/span&gt;=network-&lt;span class=&quot;literal&quot;&gt;on&lt;/span&gt;line.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Service]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;User&lt;/span&gt;=autossh&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Type&lt;/span&gt;=simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecStart&lt;/span&gt;=/bin/autossh -p &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt; -M &lt;span class=&quot;number&quot;&gt;6777&lt;/span&gt; -NR &lt;span class=&quot;string&quot;&gt;&#39;*:6766:127.0.0.1:22&#39;&lt;/span&gt; usera@a.site -i /home/autossh/.ssh/id_rsa&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;ExecReload&lt;/span&gt;=/bin/kill -HUP &lt;span class=&quot;variable&quot;&gt;$MAINPID&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;KillMode&lt;/span&gt;=process&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;Restart&lt;/span&gt;=always&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;section&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[Install]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;WantedBy&lt;/span&gt;=multi-user.target&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;WantedBy&lt;/span&gt;=graphical.target&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在&lt;strong&gt;B&lt;/strong&gt; 上设置该服务自动启动：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo systemctl &lt;span class=&quot;built_in&quot;&gt;enable&lt;/span&gt; autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你愿意，在这之后可以立刻启动它：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;B $ sudo systemctl start autossh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后你可以在&lt;strong&gt;A&lt;/strong&gt; 上使用这条反向隧道穿透B 所在的NAT SSH 连接到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A $ ssh -p 6766 userb@127.0.0.1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者是在&lt;strong&gt;C&lt;/strong&gt; 上直接穿透两层NAT SSH 连接到B：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C $ ssh -p 6766 userb@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果你对SSH 足够熟悉，你可以利用这条隧道做更多的事情，例如你可以在反向连接时指定动态端口转发：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;C $ ssh -p 6766 -qngfNTD 7677 userb@a.site&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;假设&lt;strong&gt;C&lt;/strong&gt; 是你家中的电脑，&lt;strong&gt;A&lt;/strong&gt; 是你的VPS，&lt;strong&gt;B&lt;/strong&gt; 是你公司的电脑。如果你这样做了，那么为浏览器设置端口为&lt;code&gt;7677&lt;/code&gt; 的&lt;code&gt;sock4&lt;/code&gt; 本地（127.0.0.1）代理后，你就可以在家里的浏览器上看到公司内网的网页。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;对应的情况&quot;&gt;&lt;a href=&quot;#对应的情况&quot; class=&quot;headerlink&quot; title=&quot;对应的情况&quot;&gt;&lt;/a&gt;对应的情况&lt;/h2&gt;&lt;p&gt;这篇文章主要介绍了如何利用SSH 反向隧道穿透NAT，并演示了如何维持一条稳定的SSH 隧道。&lt;/p&gt;
&lt;p&gt;假设有机器A 和B，A 有公网IP，B 位于NAT 之后并无可用的端口转发，现在想由A 主动向B 发起SSH 连接。由于B 在NAT 后端，无可用&lt;strong&gt;公网IP + 端口&lt;/strong&gt; 这样一个组合，所以A 无法穿透NAT，这篇文章应对的就是这种情况。&lt;/p&gt;
&lt;p&gt;首先有如下约定，因为很重要所以放在前面：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;机器代号&lt;/th&gt;
&lt;th&gt;机器位置&lt;/th&gt;
&lt;th&gt;地址&lt;/th&gt;
&lt;th&gt;账户&lt;/th&gt;
&lt;th&gt;ssh/sshd 端口&lt;/th&gt;
&lt;th&gt;是否需要运行sshd&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;A&lt;/td&gt;
&lt;td&gt;位于公网&lt;/td&gt;
&lt;td&gt;a.site&lt;/td&gt;
&lt;td&gt;usera&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;B&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;userb&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;是&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C&lt;/td&gt;
&lt;td&gt;位于NAT 之后&lt;/td&gt;
&lt;td&gt;127.0.0.1&lt;/td&gt;
&lt;td&gt;userc&lt;/td&gt;
&lt;td&gt;22&lt;/td&gt;
&lt;td&gt;否&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
    
    </summary>
    
      <category term="技术" scheme="https://arondight.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="运维" scheme="https://arondight.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
      <category term="内网穿透" scheme="https://arondight.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"/>
    
      <category term="SSH" scheme="https://arondight.github.io/tags/SSH/"/>
    
      <category term="隧道" scheme="https://arondight.github.io/tags/%E9%9A%A7%E9%81%93/"/>
    
  </entry>
  
  <entry>
    <title>新年快乐</title>
    <link href="https://arondight.github.io/2016/02/08/%E6%96%B0%E5%B9%B4%E5%BF%AB%E4%B9%90/"/>
    <id>https://arondight.github.io/2016/02/08/新年快乐/</id>
    <published>2016-02-07T16:00:00.000Z</published>
    <updated>2016-06-25T07:49:46.376Z</updated>
    
    <content type="html">&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#!/usr/bin/env bash&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# For Linux 3.10+ x86_64 and gcc 4.8+&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;cat &amp;lt;&amp;lt;&lt;span class=&quot;string&quot;&gt;&#39;By_Arondight&#39;&lt;/span&gt; | env gcc -xc -o .\ - - \&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&amp;amp; ./.\ - &amp;amp;&amp;amp; env rm .\ -&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;char _[]=&lt;span class=&quot;string&quot;&gt;&quot;\xe6\x96\xb0\xe5\xb9\xb4\xe5\xbf\xab\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\xe4\xb9\x90\xef\xbc\x81\x0a&quot;&lt;/span&gt;;____(___)&amp;lt;%putchar&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;((___++)[_])&amp;amp;&amp;amp;____(___);_&lt;span class=&quot;built_in&quot;&gt;exit&lt;/span&gt;(0);%&amp;gt;main()&amp;lt;%long&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;__=____;*(&amp;amp;__+2)=__;__asm__(&lt;span class=&quot;string&quot;&gt;&quot;\x78\x6f\x72\x71\x20\&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;\x25\x72\x64\x69\x2c\x20\x25\x72\x64\x69\xa\x0&quot;&lt;/span&gt;);%&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;By_Arondight&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;惟愿可以遇到美好的人和事。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
    
    </summary>
    
      <category term="节" scheme="https://arondight.github.io/categories/%E8%8A%82/"/>
    
    
      <category term="新年" scheme="https://arondight.github.io/tags/%E6%96%B0%E5%B9%B4/"/>
    
      <category term="C" scheme="https://arondight.github.io/tags/C/"/>
    
      <category term="Shell" scheme="https://arondight.github.io/tags/Shell/"/>
    
      <category term="汇编" scheme="https://arondight.github.io/tags/%E6%B1%87%E7%BC%96/"/>
    
      <category term="溢出" scheme="https://arondight.github.io/tags/%E6%BA%A2%E5%87%BA/"/>
    
      <category term="栈帧" scheme="https://arondight.github.io/tags/%E6%A0%88%E5%B8%A7/"/>
    
  </entry>
  
  <entry>
    <title>随便写一点东西</title>
    <link href="https://arondight.github.io/2016/01/03/%E9%9A%8F%E4%BE%BF%E5%86%99%E4%B8%80%E7%82%B9%E4%B8%9C%E8%A5%BF/"/>
    <id>https://arondight.github.io/2016/01/03/随便写一点东西/</id>
    <published>2016-01-03T07:34:18.000Z</published>
    <updated>2016-05-23T15:28:56.310Z</updated>
    
    <content type="html">&lt;p&gt;下午慢慢折腾了一下Hexo，然后成果就是这个博客。老实说我也不太清楚以后究竟在这上面会写点什么，多半会是所处的日常吧。&lt;/p&gt;
&lt;p&gt;折腾完大约是下午接近4 点的样子，足足搞了快5 个小时。透过窄窄的窗子所看到的已经是很惨淡的阳光了。回过神来今天已经是公历新年后的第3 天了，或许因为最近1 个半月想了很多的事情，不知不觉已经将一年最后的时间消耗殆尽，不难过也不开心。&lt;/p&gt;
&lt;p&gt;因为搞乱了生活节奏的原因，难得的假期里并没有什么新年的实感，没想过什么愿望，也没制定什么计划，不过依着心里还留存的一点点向往，希望以后能收获一些好的事物吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;下午慢慢折腾了一下Hexo，然后成果就是这个博客。老实说我也不太清楚以后究竟在这上面会写点什么，多半会是所处的日常吧。&lt;/p&gt;
&lt;p&gt;折腾完大约是下午接近4 点的样子，足足搞了快5 个小时。透过窄窄的窗子所看到的已经是很惨淡的阳光了。回过神来今天已经是公历新年后的第3 天了
    
    </summary>
    
      <category term="日常" scheme="https://arondight.github.io/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
      <category term="开始" scheme="https://arondight.github.io/tags/%E5%BC%80%E5%A7%8B/"/>
    
  </entry>
  
</feed>
